/*Arithmetic Progression

You are given an integer sequence a1
, a2,..., an of length n. You have to analyze the sequence. The task is to find all values of x, for which these two conditions hold.
1. x occurs in sequence a.
2. Consider all positions of numbers x in the sequence a (such i, that ai = x

). These numbers, sorted in the increasing order, must form an arithmetic progression. 

Find all x

 that meets the problem conditions.
Input format

The first line contains integer n
.
The next line contains integers  a1, a2, ..., an

 separated by space.
Output format

In the first line print integer M
 — the number of valid x. On each of the next M lines print two integers x and px, where x is current suitable value, px is the common difference between numbers in the progression (if x occurs exactly once in the sequence, px must equal 0). Print the pairs in the order of increasing x

.
Constraints

1
 ≤ n ≤ 105
1 ≤ ai ≤ 105

Time Limit

1 second
Examples
Input1

1
3
Output1

1
3 0
Input2

8
4 2 4 3 4 2 4 5
Output2

4
2 4
3 0
4 2
5 0
Explanation

Example 1
: there is only one number 3, that's why the common difference is 0

.

Example 2
: you can see here the index of each number.
2:  [1, 5], number 2 is present at index 1 and 5 and common difference is 5−1=4.
3:  [3], 3 is only present at index 3,that's why common difference is 0. 
4:  [0, 2, 4, 6], number 4 is present at index 0, 2, 4 and 6. According to A.P common difference is same and defference is 2. 
5:  [7], 5 is only present at index 7,that's why common difference is 0

.

Total numbers are fulfilled the condition is 4
. */
#include<bits/stdc++.h>
    using namespace std;
    typedef long long int ll;
    int main(){
        ll n,a;
        cin>>n;
        ll diff[100005]={0},last_value[100005]={0};
        bool b[100005];
        set<ll>s;
        memset(b,false,sizeof(b));
        for(ll i=1;i<=n;i++){
            cin>>a;
            if(!b[a]){
                s.insert(a);
                b[a]=true;
            }
            else{
                if(diff[a]&&(i!=diff[a]+last_value[a])){
                    s.erase(a);
                }
                diff[a]=i-last_value[a];
            }
            last_value[a]=i;
        }
        cout<<s.size()<<endl;
        for(auto it=s.begin();it!=s.end();it++){
            cout<<*it<<" "<<diff[*it]<<endl;
        }
    }
